package com.example.calla.heyhome;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Calla on 5/17/16.
 */
public class myDbHelper extends SQLiteOpenHelper {

    static private final int VERSION=3;
    static private final String DB_NAME="HeyHome.db";

    private  List<Integer> followingList;

    //create table sql statement
    static private final String SQL_CREATE_TABLE_1 =
            "CREATE TABLE users (" +
                    //change _id to uid, to be decided
                    "  uid INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "  name TEXT," +
                    "  password TEXT" +
                    "  email TEXT" +
                    "  description TEXT" +
                    "  photo TEXT" +
                    "  followingCount INTEGER" +
                    "  followerCount INTEGER);";

    static private final String SQL_CREATE_TABLE_2 =
            "CREATE TABLE relations (" +
//                    "  _id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "  user INTEGER," +
                    "  following INTEGER" +
                    "  FOREIGN KEY(user) REFERENCES users(uid)" +
                    "  FOREIGN KEY(following) REFERENCES users(uid));";

    static private final String SQL_CREATE_TABLE_3 =
            "CREATE TABLE records (" +
                    "  rid INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "  user INTEGER," +
                    "  caption TEXT" +
                    "  image TEXT" +
                    "  time TEXT" +      //generated by java
                    "  FOREIGN KEY(user) REFERENCES users(uid));";

    static private final String SQL_CREATE_TABLE_4 =
            "CREATE TABLE galleries (" +
                    "  gid INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "  brand TEXT" +
                    "  room TEXT" +
                    "  style TEXT" +
                    "  image TEXT" +
                    "  time TEXT);";

    static private final String SQL_CREATE_TABLE_5 =
            "CREATE TABLE favorites (" +
//                    "  _id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "  user INTEGER" +
                    "  favor_record INTEGER" +
                    "  favor_gallery INTEGER" +
                    "  FOREIGN KEY(favor_record) REFERENCES records(rid)" +
                    "  FOREIGN KEY(favor_galley) REFERENCES galleries(gid));";

    //drop table sql statement
    static private final String SQL_DROP_TABLE_1 = "DROP TABLE users";
    static private final String SQL_DROP_TABLE_2 = "DROP TABLE relations";
    static private final String SQL_DROP_TABLE_3 = "DROP TABLE records";
    static private final String SQL_DROP_TABLE_4 = "DROP TABLE galleries";
    static private final String SQL_DROP_TABLE_5 = "DROP TABLE favorites";

    Context context;

    public myDbHelper(Context context) {
        super(context, DB_NAME, null, VERSION);     // we use default cursor factory (null, 3rd arg)
        this.context = context;
    }

    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(SQL_CREATE_TABLE_1);
        db.execSQL(SQL_CREATE_TABLE_2);
        db.execSQL(SQL_CREATE_TABLE_3);
        db.execSQL(SQL_CREATE_TABLE_4);
        db.execSQL(SQL_CREATE_TABLE_5);
    }

    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        // a simple crude implementation that does not preserve data on upgrade
        db.execSQL(SQL_DROP_TABLE_5);
        db.execSQL(SQL_DROP_TABLE_4);
        db.execSQL(SQL_DROP_TABLE_3);
        db.execSQL(SQL_DROP_TABLE_2);
        db.execSQL(SQL_DROP_TABLE_1);

        db.execSQL(SQL_CREATE_TABLE_1);
        db.execSQL(SQL_CREATE_TABLE_2);
        db.execSQL(SQL_CREATE_TABLE_3);
        db.execSQL(SQL_CREATE_TABLE_4);
        db.execSQL(SQL_CREATE_TABLE_5);

        Toast.makeText(context, "Upgrading DB and dropping data!!!", Toast.LENGTH_SHORT).show();
    }



    //TABLE users methods
    public void addUser(User u) {
        SQLiteDatabase db = this.getReadableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put("name", u.name);
        contentValues.put("password", u.passsword);
        contentValues.put("email", u.email);
        contentValues.put("description", u.description);
        contentValues.put("photo", u.photo);
        contentValues.put("followingCount", u.followingCount);
        contentValues.put("followerCount", u.followerCount);

        db.insert("users", null, contentValues);
    }

    public boolean checkName(String name) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor =  db.rawQuery("SELECT * FROM users WHERE name=" + name + ";", null);
        cursor.moveToFirst();

        //name exists return true
        return !cursor.isNull(cursor.getColumnIndex("name"));
    }

    public boolean checkPassword(String name, String password) {
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor =  db.rawQuery("SELECT * FROM users WHERE name=" + name + ";", null);
        cursor.moveToFirst();
        //cursor must not be null
        return password == cursor.getString(cursor.getColumnIndex("password"));
    }

    public Cursor searchPeople(String str) {
        SQLiteDatabase db = this.getReadableDatabase();

        // todo double check regular expression syntax
        return  db.rawQuery("SELECT * FROM users WHERE name REGEXP %" + str + "%;", null);
    }



    //TABLE relations methods
    public void addRelation (int user_id, int following_id) {
        SQLiteDatabase db = this.getReadableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put("user", user_id);
        contentValues.put("following", following_id);

        db.insert("relations", null, contentValues);
    }

    public void deleteRelation (int user_id, int following_id) {
        SQLiteDatabase db = this.getReadableDatabase();
        db.delete("relations", "user=? AND following=?", new String[]{String.valueOf(user_id), String.valueOf(following_id)});
    }

    public Cursor getFollowing (int uid) {
        SQLiteDatabase db = this.getReadableDatabase();
        return  db.rawQuery("SELECT * FROM users WHERE user=" + uid + ";", null);
    }

    public List<Integer> getFollowingList (int uid) {
        followingList = new ArrayList<>();
        SQLiteDatabase db = this.getReadableDatabase();
        Cursor cursor = db.rawQuery("SELECT * FROM users WHERE user=" + uid + ";", null);
        if (cursor.moveToFirst()) {
            do {
                int id = cursor.getInt(cursor.getColumnIndex("following"));
            } while (cursor.moveToNext());
        }
        //followingList may be null
        return followingList;
    }



    //TABLE records methods
    public void addRecord(Record r) {
        SQLiteDatabase db = this.getReadableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put("user", r.user);
        contentValues.put("caption", r.caption);
        contentValues.put("image", r.image);
        contentValues.put("time", r.time);

        db.insert("records", null, contentValues);
    }

    public Cursor getRecords(int uid) {
        SQLiteDatabase db = this.getReadableDatabase();
        return db.rawQuery("SELECT * FROM records rc, relations rl WHERE rc.user = rl.following AND rl.user = uid;", null);
    }



    //TABLE galleries methods
    public void addGallery(Gallery g) {
        SQLiteDatabase db = this.getReadableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put("brand", g.brand);
        contentValues.put("room", g.room);
        contentValues.put("style", g.style);
        contentValues.put("time", g.time);

        db.insert("galleries", null, contentValues);
    }

    public Cursor getGalleries(String brand, String room, String style) {
        String b = "";
        String r = "";
        String s = "";

        SQLiteDatabase db = this.getReadableDatabase();
        if (brand == null || brand.length() == 0) {
            b = "galleries.brand REGEXP /'*/'";
        } else {
            b = "galleries.brand = brand";
        }

        if (room == null || room.length() == 0) {
            r = "galleries.room REGEXP /'*/'";
        } else {
            r = "galleries.room = room";
        }

        if (style == null || style.length() == 0) {
            s = "galleries.style REGEXP /'*/'";
        } else {
            s = "galleries.style = style";
        }

        return db.rawQuery("SELECT * FROM galleries WHERE " + b + " AND " + r + " AND " + s + ";", null);
    }



    //TABLE favorites methods
    public void addFavorite(int uid, int rid, int gid) {
        SQLiteDatabase db = this.getReadableDatabase();

        ContentValues contentValues = new ContentValues();
        contentValues.put("user", uid);
        contentValues.put("favor_record", rid);
        contentValues.put("favor_gallery", gid);

        //every row can only have either rid or gid, the other is invalid(null / -1 to be decided)
        db.insert("users", null, contentValues);
    }

    public Cursor getFavorites(int uid) {
        SQLiteDatabase db = this.getReadableDatabase();
        return db.rawQuery("SELECT * FROM favorites WHERE user=" + uid + ";", null);
    }

    public void deleteFavorite(int uid, int rid, int gid) {
        SQLiteDatabase db = this.getReadableDatabase();
        db.delete("favorites", "user=? AND rid=? AND gid=?", new String[]{String.valueOf(uid), String.valueOf(rid), String.valueOf(gid)});
    }

}